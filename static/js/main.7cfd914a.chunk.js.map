{"version":3,"sources":["utils/index.js","components/Cell.jsx","components/Footer.jsx","components/GameSession.jsx","scenes/GameGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["utils","createArray","size","Array","from","length","_","i","sampleArray","origArray","sampleSize","copy","slice","sample","index","Math","floor","random","push","splice","arrayCrossCounts","srcArray","crossArray","includeCount","excludeCount","srcLoop","s","c","CellStatus","Cell","width","gameStatus","isChallenge","isPicked","onClick","cellStatus","GameStatus","NEW","CHALLENGE","LOST","className","style","backgroundColor","Messages","PLAYING","WON","Footer","startGame","countdown","resetGame","nextChallenge","buttonAreaContent","GameSession","cellIds","challengeCellIds","cellWidth","challengeSize","challengeSeconds","playSeconds","maxWrongAttempts","autoStart","currentLevel","useState","setGameStatus","pickedCellIds","setPickedCellIds","setCountdown","useEffect","timerId","setTimeout","setInterval","clearTimeout","map","cellId","includes","newPickedCellIds","correctPicks","wrongPicks","pickCell","GameGenerator","gridSize","setGridSize","setChallengeSize","gameId","setGameId","level","setLevel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cfd914a.chunk.js","sourcesContent":["// Math science\r\nconst utils = {\r\n\t/*\r\nCreate an array based on a numeric size property.\r\nExample: createArray(5) => [0, 1, 2, 3, 4]\r\n*/\r\n\tcreateArray: (size) => Array.from({ length: size }, (_, i) => i),\r\n\t/*\r\nPick random elements from origArray up to sampleSize\r\nAnd use them to form a new array.\r\nExample: sampleArray([9, 12, 4, 7, 5], 3) => [12, 7, 5]\r\n*/\r\n\tsampleArray: (origArray, sampleSize) => {\r\n\t\tconst copy = origArray.slice(0);\r\n\t\tconst sample = [];\r\n\t\tfor (let i = 0; i < sampleSize && i < copy.length; i++) {\r\n\t\t\tconst index = Math.floor(Math.random() * copy.length);\r\n\t\t\tsample.push(copy.splice(index, 1)[0]);\r\n\t\t}\r\n\t\treturn sample;\r\n\t},\r\n\t/*\r\nGiven a srcArray and a crossArray, Count how many elements\r\nin srcArray exist or do not exist in crossArray.\r\nReturns an array with the two counts.\r\nExample: arrayCrossCounts([0, 1, 2, 3, 4], [1, 3, 5]) => [2, 3]\r\n*/\r\n\tarrayCrossCounts: (srcArray, crossArray) => {\r\n\t\tlet includeCount = 0;\r\n\t\tlet excludeCount = 0;\r\n\t\tsrcLoop: for (let s = 0; s < srcArray.length; s++) {\r\n\t\t\tfor (let c = 0; c < crossArray.length; c++) {\r\n\t\t\t\tif (crossArray[c] === srcArray[s]) {\r\n\t\t\t\t\tincludeCount += 1;\r\n\t\t\t\t\tcontinue srcLoop;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\texcludeCount += 1;\r\n\t\t}\r\n\t\treturn [includeCount, excludeCount];\r\n\t},\r\n};\r\n\r\nexport default utils;\r\n","import React from \"react\";\r\nimport { GameStatus } from \"./GameSession\";\r\nconst CellStatus = {\r\n\tNORMAL: \"white\",\r\n\tHIGHLIGHT: \"lightblue\",\r\n\tCORRECT: \"lightgreen\",\r\n\tWRONG: \"pink\",\r\n};\r\nconst Cell = ({ width, gameStatus, isChallenge, isPicked, onClick }) => {\r\n\tlet cellStatus = CellStatus.NORMAL;\r\n\tif (gameStatus !== GameStatus.NEW) {\r\n\t\tif (isPicked) {\r\n\t\t\tcellStatus = isChallenge ? CellStatus.CORRECT : CellStatus.WRONG;\r\n\t\t} else if (\r\n\t\t\tisChallenge &&\r\n\t\t\t(gameStatus === GameStatus.CHALLENGE || gameStatus === GameStatus.LOST)\r\n\t\t) {\r\n\t\t\tcellStatus = CellStatus.HIGHLIGHT;\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName=\"cell\"\r\n\t\t\tstyle={{ width: `${width}%`, backgroundColor: cellStatus }}\r\n\t\t\tonClick={onClick}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport { GameStatus } from \"./GameSession\";\r\nconst Messages = {\r\n\tNEW: \"You will have a few seconds to memorize the blue random cells\",\r\n\tCHALLENGE: \"Remember these blue cells now\",\r\n\tPLAYING: \"Which cells were blue?\",\r\n\tWON: \"Victory!\",\r\n\tLOST: \"Game Over\",\r\n};\r\n\r\nfunction Footer({ gameStatus, startGame, countdown, resetGame, nextChallenge }) {\r\n\tconst buttonAreaContent = () => {\r\n\t\tswitch (gameStatus) {\r\n\t\t\tcase GameStatus.NEW:\r\n\t\t\t\treturn <button onClick={startGame}>Start Game</button>;\r\n\t\t\tcase GameStatus.CHALLENGE:\r\n\t\t\t\tbreak;\r\n\t\t\tcase GameStatus.PLAYING:\r\n\t\t\t\treturn countdown;\r\n\t\t\tcase GameStatus.WON:\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={nextChallenge}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tPlay next challenge\r\n\t\t\t\t\t</button>\r\n\t\t\t\t);\r\n\t\t\tcase GameStatus.LOST: {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={resetGame}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tPlay Again\r\n\t\t\t\t\t</button>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"message\">{Messages[gameStatus]}</div>\r\n\t\t\t<div className=\"button\">{buttonAreaContent()}</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport utils from \"../utils\";\r\nimport Cell from \"./Cell\";\r\nimport Footer from \"./Footer\";\r\n\r\nexport const GameStatus = {\r\n\tNEW: \"NEW\",\r\n\tCHALLENGE: \"CHALLENGE\",\r\n\tPLAYING: \"PLAYING\",\r\n\tWON: \"WON\",\r\n\tLOST: \"LOST\",\r\n};\r\n\r\nfunction GameSession({\r\n\tcellIds,\r\n\tchallengeCellIds,\r\n\tcellWidth,\r\n\tchallengeSize,\r\n\tchallengeSeconds,\r\n\tplaySeconds,\r\n\tmaxWrongAttempts,\r\n\tautoStart,\r\n\tresetGame,\r\n\tnextChallenge,\r\n\tcurrentLevel\r\n}) {\r\n\tconst [gameStatus, setGameStatus] = useState(autoStart ? GameStatus.CHALLENGE : GameStatus.NEW);\r\n\tconst [pickedCellIds, setPickedCellIds] = useState([]);\r\n\tconst [countdown, setCountdown] = useState(playSeconds);\r\n\r\n\tconst pickCell = (cellId) => {\r\n\t\tif (gameStatus === GameStatus.PLAYING) {\r\n\t\t\tsetPickedCellIds((pickedCellIds) => {\r\n\t\t\t\tif (pickedCellIds.includes(cellId)) {\r\n\t\t\t\t\treturn pickedCellIds;\r\n\t\t\t\t}\r\n\t\t\t\tconst newPickedCellIds = [...pickedCellIds, cellId];\r\n\t\t\t\tconst [correctPicks, wrongPicks] = utils.arrayCrossCounts(\r\n\t\t\t\t\tnewPickedCellIds,\r\n\t\t\t\t\tchallengeCellIds\r\n\t\t\t\t);\r\n\t\t\t\tif (correctPicks === challengeSize) {\r\n\t\t\t\t\tsetGameStatus(GameStatus.WON);\r\n\t\t\t\t}\r\n\t\t\t\tif (wrongPicks === maxWrongAttempts) {\r\n\t\t\t\t\tsetGameStatus(GameStatus.LOST);\r\n\t\t\t\t}\r\n\t\t\t\treturn newPickedCellIds;\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tlet timerId;\r\n\t\tif (gameStatus === GameStatus.CHALLENGE) {\r\n\t\t\ttimerId = setTimeout(\r\n\t\t\t\t() => setGameStatus(GameStatus.PLAYING),\r\n\t\t\t\t1000 * challengeSeconds\r\n\t\t\t);\r\n\t\t}\r\n\t\tif (gameStatus === GameStatus.PLAYING) {\r\n\t\t\ttimerId = setInterval(() => {\r\n\t\t\t\tsetCountdown((countdown) => {\r\n\t\t\t\t\tif (countdown === 1) {\r\n\t\t\t\t\t\tclearTimeout(timerId);\r\n\t\t\t\t\t\tsetGameStatus(GameStatus.LOST);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn countdown - 1;\r\n\t\t\t\t});\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\t\treturn () => clearTimeout(timerId);\r\n\t}, [gameStatus, challengeSeconds]);\r\n\treturn (\r\n\t\t<div className=\"game\">\r\n\t\t\t<div>\r\n\t\t\t\t<h5> Level : {currentLevel}</h5>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"grid\">\r\n\t\t\t\t{cellIds.map((cellId) => (\r\n\t\t\t\t\t<Cell\r\n\t\t\t\t\t\tkey={cellId}\r\n\t\t\t\t\t\twidth={cellWidth}\r\n\t\t\t\t\t\tgameStatus={gameStatus}\r\n\t\t\t\t\t\tisChallenge={challengeCellIds.includes(cellId)}\r\n\t\t\t\t\t\tisPicked={pickedCellIds.includes(cellId)}\r\n\t\t\t\t\t\tonClick={() => pickCell(cellId)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<Footer\r\n\t\t\t\tgameStatus={gameStatus}\r\n\t\t\t\tstartGame={() => setGameStatus(GameStatus.CHALLENGE)}\r\n\t\t\t\tcountdown={countdown}\r\n\t\t\t\tresetGame={resetGame}\r\n\t\t\t\tnextChallenge={nextChallenge}\r\n\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default GameSession;\r\n","import React, { useState } from \"react\";\r\nimport GameSession from \"../components/GameSession\";\r\nimport utils from \"../utils\";\r\n\r\nconst GameGenerator = () => {\r\n\tconst [gridSize, setGridSize] = useState(5);\r\n\r\n\tconst [challengeSize, setChallengeSize] = useState(3);\r\n\tconst [gameId, setGameId] = useState(1);\r\n\tconst [level, setLevel] = useState(1);\r\n\tconst cellIds = utils.createArray(gridSize * gridSize);\r\n\tconst cellWidth = 100 / gridSize;\r\n\tconst challengeCellIds = utils.sampleArray(cellIds, challengeSize);\r\n\r\n\tconst handleNextChallenge = () => {\r\n\t\tif (challengeSize % 2 === 0) {\r\n\t\t\tsetGridSize(gridSize + 1);\r\n\t\t}\r\n\t\tsetGameId(gameId => gameId + 1);\r\n\t\tsetChallengeSize(challengeSize + 1);\r\n\t\tsetLevel(level + 1);\r\n\t}\r\n\tconst handleResetGame = () => {\r\n\t\tsetChallengeSize(3);\r\n\t\tsetGridSize(5);\r\n\t\tsetLevel(1)\r\n\t\tsetGameId(gameId => gameId + 1);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<GameSession\r\n\t\t\tkey={gameId}\r\n\t\t\tcellIds={cellIds}\r\n\t\t\tcurrentLevel={level}\r\n\t\t\tchallengeCellIds={challengeCellIds}\r\n\t\t\tcellWidth={cellWidth}\r\n\t\t\tchallengeSize={challengeSize}\r\n\t\t\tchallengeSeconds={3}\r\n\t\t\tnextChallenge={handleNextChallenge}\r\n\t\t\tplaySeconds={10}\r\n\t\t\tmaxWrongAttempts={3}\r\n\t\t\tautoStart={gameId > 1}\r\n\t\t\tresetGame={handleResetGame}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default GameGenerator;\r\n","import GameGenerator from \"./scenes/GameGenerator\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n\treturn <GameGenerator />;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}